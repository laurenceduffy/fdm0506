{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":82,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":4,"numTotalTests":82,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1646749586719,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["validateToken"],"failureMessages":[],"fullName":"validateToken should return status 200 when verifyUserToken returns a user","location":null,"status":"passed","title":"should return status 200 when verifyUserToken returns a user"},{"ancestorTitles":["validateToken"],"failureMessages":[],"fullName":"validateToken should return body containing token when verifyUserToken returns a user","location":null,"status":"passed","title":"should return body containing token when verifyUserToken returns a user"},{"ancestorTitles":["validateToken"],"failureMessages":[],"fullName":"validateToken should return status 401 when verifyUserToken returns null","location":null,"status":"passed","title":"should return status 401 when verifyUserToken returns null"},{"ancestorTitles":["validateAdmin"],"failureMessages":[],"fullName":"validateAdmin should return status 200 when verifyAdminToken returns a user","location":null,"status":"passed","title":"should return status 200 when verifyAdminToken returns a user"},{"ancestorTitles":["validateAdmin"],"failureMessages":[],"fullName":"validateAdmin should return body containing token when verifyAdminToken returns a user","location":null,"status":"passed","title":"should return body containing token when verifyAdminToken returns a user"},{"ancestorTitles":["validateAdmin"],"failureMessages":[],"fullName":"validateAdmin should return status 401 when verifyAdminToken returns null","location":null,"status":"passed","title":"should return status 401 when verifyAdminToken returns null"}],"endTime":1646749588906,"message":"","name":"D:\\src\\FDM06\\auth-service\\src\\controllers\\tokenController.test.js","startTime":1646749587094,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 200 when getUser returns an active user and verifyPassword returns true","location":null,"status":"passed","title":"should return status 200 when getUser returns an active user and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return body containing correct JWT when getUser returns an active user and verifyPassword returns true","location":null,"status":"passed","title":"should return body containing correct JWT when getUser returns an active user and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 200 when getUser returns an active admin and verifyPassword returns true","location":null,"status":"passed","title":"should return status 200 when getUser returns an active admin and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return body containing correct JWT when getUser returns an active admin and verifyPassword returns true","location":null,"status":"passed","title":"should return body containing correct JWT when getUser returns an active admin and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 403 when getUser returns a user awaiting re-activation and verifyPassword returns true","location":null,"status":"passed","title":"should return status 403 when getUser returns a user awaiting re-activation and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 403 when getUser returns a de-activated user and verifyPassword returns true","location":null,"status":"passed","title":"should return status 403 when getUser returns a de-activated user and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 403 when getUser returns a user awaiting deletion and verifyPassword returns true","location":null,"status":"passed","title":"should return status 403 when getUser returns a user awaiting deletion and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 403 when getUser returns a non-activated user and verifyPassword returns true","location":null,"status":"passed","title":"should return status 403 when getUser returns a non-activated user and verifyPassword returns true"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 401 when getUser returns a user and verifyPassword returns false","location":null,"status":"passed","title":"should return status 401 when getUser returns a user and verifyPassword returns false"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 401 when getUser returns null","location":null,"status":"passed","title":"should return status 401 when getUser returns null"},{"ancestorTitles":["login"],"failureMessages":[],"fullName":"login should return status 400 when password is not provided","location":null,"status":"passed","title":"should return status 400 when password is not provided"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 400 when username is invalid","location":null,"status":"passed","title":"should return status 400 when username is invalid"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 400 when email address is invalid","location":null,"status":"passed","title":"should return status 400 when email address is invalid"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 400 when password is invalid","location":null,"status":"passed","title":"should return status 400 when password is invalid"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 400 when forename is omitted","location":null,"status":"passed","title":"should return status 400 when forename is omitted"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 400 when surname is omitted","location":null,"status":"passed","title":"should return status 400 when surname is omitted"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 403 when getUser returns a user","location":null,"status":"passed","title":"should return status 403 when getUser returns a user"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 502 when createUser returns a user and sendRegistrationComms returns false","location":null,"status":"passed","title":"should return status 502 when createUser returns a user and sendRegistrationComms returns false"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return status 200 when createUser returns a user and sendRegistrationComms returns true","location":null,"status":"passed","title":"should return status 200 when createUser returns a user and sendRegistrationComms returns true"},{"ancestorTitles":["register"],"failureMessages":[],"fullName":"register should return body containing a valid JWT when createUser returns a user and sendRegistrationComms returns true","location":null,"status":"passed","title":"should return body containing a valid JWT when createUser returns a user and sendRegistrationComms returns true"}],"endTime":1646749589151,"message":"","name":"D:\\src\\FDM06\\auth-service\\src\\controllers\\authController.test.js","startTime":1646749587092,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 200 when getUser returns a non-activated user and activateUser returns a user","location":null,"status":"passed","title":"should return status 200 when getUser returns a non-activated user and activateUser returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return body containing a valid JWT when getUser returns a non-activated user and activateUser returns a user","location":null,"status":"passed","title":"should return body containing a valid JWT when getUser returns a non-activated user and activateUser returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 200 when getUser returns null and confirmNewEmail returns a user","location":null,"status":"passed","title":"should return status 200 when getUser returns null and confirmNewEmail returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return body containing a valid JWT when getUser returns null and confirmNewEmail returns a user","location":null,"status":"passed","title":"should return body containing a valid JWT when getUser returns null and confirmNewEmail returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 200 when getUser returns an activated user and confirmNewEmail returns a user","location":null,"status":"passed","title":"should return status 200 when getUser returns an activated user and confirmNewEmail returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return body containing a valid JWT when getUser returns an activated user and confirmNewEmail returns a user","location":null,"status":"passed","title":"should return body containing a valid JWT when getUser returns an activated user and confirmNewEmail returns a user"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 403 when getUser returns a non-activated user and activateUser returns false","location":null,"status":"passed","title":"should return status 403 when getUser returns a non-activated user and activateUser returns false"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 403 when getUser returns an activated user confirmNewEmail returns false","location":null,"status":"passed","title":"should return status 403 when getUser returns an activated user confirmNewEmail returns false"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 403 when getUser returns null confirmNewEmail returns false","location":null,"status":"passed","title":"should return status 403 when getUser returns null confirmNewEmail returns false"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 400 when the email parameter is null","location":null,"status":"passed","title":"should return status 400 when the email parameter is null"},{"ancestorTitles":["activate"],"failureMessages":[],"fullName":"activate should return status 400 when the code parameter is null","location":null,"status":"passed","title":"should return status 400 when the code parameter is null"},{"ancestorTitles":["deactivateUser"],"failureMessages":[],"fullName":"deactivateUser should return status 200 when verifyAdminToken and getUser both return a user","location":null,"status":"passed","title":"should return status 200 when verifyAdminToken and getUser both return a user"},{"ancestorTitles":["deactivateUser"],"failureMessages":[],"fullName":"deactivateUser should call getUser when verifyAdminToken returns a user","location":null,"status":"passed","title":"should call getUser when verifyAdminToken returns a user"},{"ancestorTitles":["deactivateUser"],"failureMessages":[],"fullName":"deactivateUser should call deactivateUser when verifyAdminToken and getUser both return a user","location":null,"status":"passed","title":"should call deactivateUser when verifyAdminToken and getUser both return a user"},{"ancestorTitles":["deactivateUser"],"failureMessages":[],"fullName":"deactivateUser should return status 403 when verifyAdminToken returns false","location":null,"status":"passed","title":"should return status 403 when verifyAdminToken returns false"},{"ancestorTitles":["deactivateUser"],"failureMessages":[],"fullName":"deactivateUser should return status 404 when verifyAdminToken returns a user and getUser returns null","location":null,"status":"passed","title":"should return status 404 when verifyAdminToken returns a user and getUser returns null"},{"ancestorTitles":["reactivateUser"],"failureMessages":[],"fullName":"reactivateUser should return status 200 when verifyAdminToken and getUser both return a user","location":null,"status":"passed","title":"should return status 200 when verifyAdminToken and getUser both return a user"},{"ancestorTitles":["reactivateUser"],"failureMessages":[],"fullName":"reactivateUser should call getUser when verifyAdminToken returns a user","location":null,"status":"passed","title":"should call getUser when verifyAdminToken returns a user"},{"ancestorTitles":["reactivateUser"],"failureMessages":[],"fullName":"reactivateUser should call reactivateUser when verifyAdminToken and getUser both return a user","location":null,"status":"passed","title":"should call reactivateUser when verifyAdminToken and getUser both return a user"},{"ancestorTitles":["reactivateUser"],"failureMessages":[],"fullName":"reactivateUser should return status 403 when verifyAdminToken returns false","location":null,"status":"passed","title":"should return status 403 when verifyAdminToken returns false"},{"ancestorTitles":["reactivateUser"],"failureMessages":[],"fullName":"reactivateUser should return status 404 when verifyAdminToken returns a user and getUser returns null","location":null,"status":"passed","title":"should return status 404 when verifyAdminToken returns a user and getUser returns null"},{"ancestorTitles":["requestReactivation"],"failureMessages":[],"fullName":"requestReactivation should return status 200 when getUser returns a user and requestReactivation returns true","location":null,"status":"passed","title":"should return status 200 when getUser returns a user and requestReactivation returns true"},{"ancestorTitles":["requestReactivation"],"failureMessages":[],"fullName":"requestReactivation should return status 404 when getUser returns null","location":null,"status":"passed","title":"should return status 404 when getUser returns null"},{"ancestorTitles":["requestReactivation"],"failureMessages":[],"fullName":"requestReactivation should return status 403 when getUser returns a user and requestReactivation returns false","location":null,"status":"passed","title":"should return status 403 when getUser returns a user and requestReactivation returns false"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should call getAllUserRequests when verifyAdminToken returns a user","location":null,"status":"passed","title":"should call getAllUserRequests when verifyAdminToken returns a user"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return status 200 when getAllUserRequests returns a list of users to reactivate and delete","location":null,"status":"passed","title":"should return status 200 when getAllUserRequests returns a list of users to reactivate and delete"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return body containing all requests when getAllUserRequests returns a list of users to reactivate and delete","location":null,"status":"passed","title":"should return body containing all requests when getAllUserRequests returns a list of users to reactivate and delete"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return status 200 when getAllUserRequests returns only a list of users to reactivate","location":null,"status":"passed","title":"should return status 200 when getAllUserRequests returns only a list of users to reactivate"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return body containing reactivation requests when getAllUserRequests returns only a list of users to reactivate","location":null,"status":"passed","title":"should return body containing reactivation requests when getAllUserRequests returns only a list of users to reactivate"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return status 200 when getAllUserRequests returns only a list of users to reactivate","location":null,"status":"passed","title":"should return status 200 when getAllUserRequests returns only a list of users to reactivate"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return body containing delete requests when getAllUserRequests returns only a list of users to reactivate","location":null,"status":"passed","title":"should return body containing delete requests when getAllUserRequests returns only a list of users to reactivate"},{"ancestorTitles":["getUserRequests"],"failureMessages":[],"fullName":"getUserRequests should return status 404 when getAllUserRequests returns no user requests","location":null,"status":"passed","title":"should return status 404 when getAllUserRequests returns no user requests"}],"endTime":1646749589168,"message":"","name":"D:\\src\\FDM06\\auth-service\\src\\controllers\\activationController.test.js","startTime":1646749587094,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return status 403 when an invalid token is used","location":null,"status":"passed","title":"should return status 403 when an invalid token is used"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should call getUser with the username parameter when a valid admin token is used","location":null,"status":"passed","title":"should call getUser with the username parameter when a valid admin token is used"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should call getUser with the user's email when a valid user token is used","location":null,"status":"passed","title":"should call getUser with the user's email when a valid user token is used"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return status 404 when getUser returns null","location":null,"status":"passed","title":"should return status 404 when getUser returns null"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return status 200 when a valid user token is used and getUser returns a valid user","location":null,"status":"passed","title":"should return status 200 when a valid user token is used and getUser returns a valid user"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return status 200 when a valid admin token is used and getUser returns a valid user","location":null,"status":"passed","title":"should return status 200 when a valid admin token is used and getUser returns a valid user"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return body containing the retrieved user when a valid user token is used and getUser returns a valid user","location":null,"status":"passed","title":"should return body containing the retrieved user when a valid user token is used and getUser returns a valid user"},{"ancestorTitles":["getUserDetails"],"failureMessages":[],"fullName":"getUserDetails should return body containing selected user information when a valid admin token is used and getUser returns a valid user","location":null,"status":"passed","title":"should return body containing selected user information when a valid admin token is used and getUser returns a valid user"},{"ancestorTitles":["updateUserDetails"],"failureMessages":[],"fullName":"updateUserDetails should call changeEmail when email parameter is passed","location":null,"status":"passed","title":"should call changeEmail when email parameter is passed"},{"ancestorTitles":["updateUserDetails"],"failureMessages":[],"fullName":"updateUserDetails should call changePassword when password parameter is passed and email parameter is null","location":null,"status":"passed","title":"should call changePassword when password parameter is passed and email parameter is null"},{"ancestorTitles":["updateUserDetails"],"failureMessages":[],"fullName":"updateUserDetails should return status 400 when all input parameters are null","location":null,"status":"passed","title":"should return status 400 when all input parameters are null"},{"ancestorTitles":["updateUserDetails"],"failureMessages":[],"fullName":"updateUserDetails should return status 200 when a date of birth is given","location":null,"status":"passed","title":"should return status 200 when a date of birth is given"},{"ancestorTitles":["changePassword"],"failureMessages":[],"fullName":"changePassword should return status 400 when provided with an invalid password","location":null,"status":"passed","title":"should return status 400 when provided with an invalid password"},{"ancestorTitles":["changePassword"],"failureMessages":[],"fullName":"changePassword should return status 200 when provided with a valid password","location":null,"status":"passed","title":"should return status 200 when provided with a valid password"},{"ancestorTitles":["changeEmail"],"failureMessages":[],"fullName":"changeEmail should return status 400 when provided with an invalid email","location":null,"status":"passed","title":"should return status 400 when provided with an invalid email"},{"ancestorTitles":["changeEmail"],"failureMessages":[],"fullName":"changeEmail should return status 403 when emailInUse returns true","location":null,"status":"passed","title":"should return status 403 when emailInUse returns true"},{"ancestorTitles":["changeEmail"],"failureMessages":[],"fullName":"changeEmail should return status 502 when emailInUse and sendConfirmEmail return false","location":null,"status":"passed","title":"should return status 502 when emailInUse and sendConfirmEmail return false"},{"ancestorTitles":["changeEmail"],"failureMessages":[],"fullName":"changeEmail should return status 200 when emailInUse returns false sendConfirmEmail returns true","location":null,"status":"passed","title":"should return status 200 when emailInUse returns false sendConfirmEmail returns true"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should return status 404 when passed a valid admin token and deleteUser returns false","location":null,"status":"passed","title":"should return status 404 when passed a valid admin token and deleteUser returns false"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should return status 200 when passed a valid admin token and deleteUser returns true","location":null,"status":"passed","title":"should return status 200 when passed a valid admin token and deleteUser returns true"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should return status 200 when passed a valid user token with a corresponding matching email","location":null,"status":"passed","title":"should return status 200 when passed a valid user token with a corresponding matching email"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should call requestDeletion with the correct user when passed a valid user token with a corresponding matching email","location":null,"status":"passed","title":"should call requestDeletion with the correct user when passed a valid user token with a corresponding matching email"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should return status 403 when passed a valid user token with a non-matching email","location":null,"status":"passed","title":"should return status 403 when passed a valid user token with a non-matching email"},{"ancestorTitles":["deleteUser"],"failureMessages":[],"fullName":"deleteUser should return status 403 when passed a non-valid user token","location":null,"status":"passed","title":"should return status 403 when passed a non-valid user token"}],"endTime":1646749589223,"message":"","name":"D:\\src\\FDM06\\auth-service\\src\\controllers\\userController.test.js","startTime":1646749587093,"status":"passed","summary":""}],"wasInterrupted":false}